version: "3.8"
services:
  ssh:
    image: code0ex/ssh_reverse_proxy:development
    container_name: ssh_reverse_proxy
    hostname: ssh_reverse_proxy
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
      target: ssh_reverse_proxy
      platforms:
        - linux/arm64
        - linux/amd64
    networks:
      - api
    ports:
      - "2222:22"

  db:
    image: postgres:13
    container_name: db
    hostname: db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - api
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  db_push:
    image: code0ex/db_push_reverse_proxy:development
    container_name: db_push
    hostname: db_push
    build:
      context: .
      dockerfile: Dockerfile
      target: db_push_reverse_proxy
      platforms:
        - linux/arm64
        - linux/amd64
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    networks:
      - api
    depends_on:
      - db

  api:
    image: code0ex/api_reverse_proxy:development
    container_name: api
    hostname: api
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
      target: api_reverse_proxy
      platforms:
        - linux/arm64
        - linux/amd64
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - AUTHORIZE_KEY_HOST=${AUTHORIZE_KEY_HOST}
      - AUTHORIZE_KEY_PORT=${AUTHORIZE_KEY_PORT}
    networks:
      - api
    depends_on:
      - ssh
      - db_push
      - db
    ports:
      - 8081:8081

networks:
  api:
    driver: bridge

volumes:
  db-data:
    driver: local
